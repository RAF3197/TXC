mw.loader.implement("ext.eventLogging",function(){(function(mw,$,console){'use strict';function ValidationError(message){this.message=message;}ValidationError.prototype=new Error();var self=mw.eventLog={schemas:{},warn:console&&$.isFunction(console.warn)?$.proxy(console.warn,console):mw.log,declareSchema:function(schemaName,meta){if(self.schemas.hasOwnProperty(schemaName)){self.warn('Clobbering existing "'+schemaName+'" schema');}self.schemas[schemaName]=$.extend(true,{revision:-1,schema:{properties:{}},defaults:{}},self.schemas[schemaName],meta);return self.schemas[schemaName];},isInstanceOf:function(value,type){if(value===undefined||value===null){return false;}switch(type){case'string':return typeof value==='string';case'timestamp':return value instanceof Date||(typeof value==='number'&&value>=0&&value%1===0);case'boolean':return typeof value==='boolean';case'integer':return typeof value==='number'&&value%1===0;case'number':return typeof value==='number'&&isFinite(value);default:
return false;}},isValid:function(event,schemaName){try{self.assertValid(event,schemaName);return true;}catch(e){if(!(e instanceof ValidationError)){throw e;}self.warn('Validation error against schema '+schemaName+': '+e.message);return false;}},assertValid:function(event,schemaName){var schema=self.schemas[schemaName]||null,props=schema.schema.properties,prop;if($.isEmpty(props)){throw new ValidationError('Unknown schema: '+schemaName);}for(prop in event){if(props[prop]===undefined){throw new ValidationError('Unrecognized property: '+prop);}}$.each(props,function(prop,desc){var val=event[prop];if(val===undefined){if(desc.required){throw new ValidationError('Missing property: '+prop);}return true;}if(!(self.isInstanceOf(val,desc.type))){throw new ValidationError('Wrong type for property: '+prop+' '+val);}if(desc['enum']&&$.inArray(val,desc['enum'])===-1){throw new ValidationError('Value "'+val+'" for property: '+prop+' not in enum '+$.toJSON(desc['enum']));}});return true;},setDefaults:
function(schemaName,schemaDefaults){var schema=self.schemas[schemaName];if(schema===undefined){self.warn('Setting defaults on unknown schema "'+schemaName+'"');schema=self.declareSchema(schemaName);}return $.extend(true,schema.defaults,schemaDefaults);},prepare:function(schemaName,event){var prop,schema=self.schemas[schemaName];if(schema===undefined){self.warn('Got event with unknown schema "'+schemaName+'"');schema=self.declareSchema(schemaName);}event=$.extend(true,{},schema.defaults,event);for(prop in event){if(typeof event[prop]==='function'){event[prop]=event[prop].call(event);}}return{event:event,clientValidated:self.isValid(event,schemaName),revision:schema.revision,schema:schemaName,webHost:window.location.hostname,wiki:mw.config.get('wgDBname')};},dispatch:function(data){var beacon=document.createElement('img'),baseUri=mw.config.get('wgEventLoggingBaseUri'),dfd=$.Deferred();if(!baseUri){dfd.rejectWith(data,[data]);return dfd.promise();}$(beacon).on('error',function(){dfd.
resolveWith(data,[data]);});beacon.src=baseUri+'?'+encodeURIComponent($.toJSON(data))+';';return dfd.promise();},logEvent:function(schemaName,eventInstance){return self.dispatch(self.prepare(schemaName,eventInstance));}};if(!mw.config.get('wgEventLoggingBaseUri')){self.warn('"$wgEventLoggingBaseUri" is not set.');}}(mediaWiki,jQuery,window.console));;},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:9669b37ede75b2bfa3a851d650395f6c */